plugins {
    id "idea"
    id "org.jetbrains.kotlin.jvm" version "1.2.41"
    id "org.jetbrains.kotlin.kapt" version "1.2.41"
    id "org.jetbrains.kotlin.plugin.spring" version "1.2.41"
    id "org.springframework.boot" version "2.0.2.RELEASE"
    id "io.codearte.nexus-staging" version "0.11.0"
    id "maven"
    id "signing"
}

apply plugin: "io.spring.dependency-management"

group = "io.openfuture"
version = '${VERSION}'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    // Sdk
    compile("io.openfuture:sdk:1.0.0")

    // Spring
    compile("org.springframework.boot:spring-boot-starter")
    compile("org.springframework.boot:spring-boot-starter-amqp")
    compile("org.springframework.boot:spring-boot-configuration-processor")

    // Kotlin
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")

    // Tools
    compile("javax.validation:validation-api:2.0.1.Final")

    // Test
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

bootJar { enabled = false }
jar { enabled = true }

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from "build/docs/javadoc"
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = "sources"
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

if (project.hasProperty("sign")) {
    signing {
        sign configurations.archives
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: '${OSSRHUSERNAME}', password: '${OSSRHPASSWORD}')
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: '${OSSRHUSERNAME}', password: '${OSSRHPASSWORD}')
            }

            pom.project {
                name "open-api-spring-boot-sdk"
                packaging "jar"
                url "https://github.com/OpenFuturePlatform/open-api-spring-boot-sdk"
                description "OPEN Platform Spring boot SDK"

                licenses {
                    license {
                        name "MIT licence"
                        url "https://github.com/OpenFuturePlatform/open-api-spring-boot-sdk/blob/master/LICENCE.txt"
                    }
                }

                scm {
                    url "https://github.com/OpenFuturePlatform/open-api-spring-boot-sdk"
                }

                developers {
                    developer {
                        id "openplatform"
                        name "OPEN Platform"
                    }
                }
            }
        }
    }
}